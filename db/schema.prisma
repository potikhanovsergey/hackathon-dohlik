// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String   @default("Новый пользователь")
  email          String   @unique
  hashedPassword String?
  avatar         String?
  role           Role     @default(USER)

  tokens     Token[]
  sessions   Session[]
  workgroups WorkgroupParticipation[] // Пользователь может быть участником многих рабочих групп
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  hashedToken String
  // type        String
  // See note below about TokenType enum
  type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
enum TokenType {
  RESET_PASSWORD
}

enum Role {
  USER
  ADMIN
}

// Связь между Users и Workgroup
model WorkgroupParticipation {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  workgroupId Int // Одно участие — одна группа
  userId      Int // Одно участие — один пользователь

  user      User      @relation(fields: [userId], references: [id])
  workgroup Workgroup @relation(fields: [workgroupId], references: [id])
}

// Рабочая группа
model Workgroup {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name           String
  participations WorkgroupParticipation[] // У рабочей группы может быть много участников
  solutions      Solution[] // Рабочая группа может принять много решений
}

// Объект
model Entity {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  district   String? // Округ
  region     String? // Район
  address    String? // Адрес
  type       String? // Тип объекта, необхдим в определении рабочей группы
  state      String? // Состояние объекта
  area       Float? // Площадь объекта
  owner      String? // Собственник объекта
  actualUser String? // Фактический пользователь объекта

  files      EntityFile[] // Файлы, фото/видеоматериалы
  attributes EntityAttribute[]
  solutions  Solution[] // По одному объекту может быть принято несколько решений
}

// Файл объекта — документ, видеоматериал, фотоматериал
model EntityFile {
  id       Int    @id @default(autoincrement())
  name     String
  path     String // Путь к файлу на хостинге
  entity   Entity @relation(fields: [entityId], references: [id])
  entityId Int
}

// Связь между Объектом и Аттрибутом
model EntityAttribute {
  id          Int @id @default(autoincrement())
  entityId    Int
  attributeId Int

  value String[]

  entity    Entity    @relation(fields: [entityId], references: [id])
  attribute Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
}

// Аттрибут объекта/решения (администратор сможет добавлять новые поля к сущностям)
model Attribute {
  id           Int      @id @default(autoincrement())
  name         String // Название поля
  placeholder  String? // Подсказка к полю (для текста и даты)
  defaultValue String[] // Значение аттрибута по умолчанию (если значение должно быть одиночным, оно будет в нулевом индексе, в остальных случаях значение по умолчанию это массив из значений, например у чекбоксов)
  autoFill     Boolean  @default(false) // Заполнять это свойство в существующих и будущих объектах значением по умолчанию, если это свойство у них не заполнено
  data         String[] // Некоторые аттрибуты могут хранить массив данных (checkbox, radio, select)

  parent        AttributeParent // В будущем кроме Entity аттрибуты могут добавляться для любых других сущностей
  attributeType EntityAttributeType // В будущем аттрибуту можно добавлять новые типы полей (например выпадающий список — select)
  entities      EntityAttribute[]
}

// Возможные для добавления поля
enum EntityAttributeType {
  text // Текст
  checkbox // Флажки/галочки/чекбоксы
  radio // Радио-кнопки
  switch // Переключючатель
  file // Файл (документ, изображение, видеоматериал)
  date // Дата
}

// Аттрибуты можно добавлять для разных сущностей (объект/решение/т.д.)
// В будущем кроме Entity аттрибуты могут добавляться для любых других сущностей
enum AttributeParent {
  entity
}

// Решение по объекту
model Solution {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String // Формулировка решения

  workgroupId Int
  entityId    Int
  protocolId  Int?

  workgroup   Workgroup    @relation(fields: [workgroupId], references: [id]) // Решение принимает одна рабочая группа
  entity      Entity       @relation(fields: [entityId], references: [id]) // Решение принимается по одному объекту
  protocol    Protocol?    @relation(fields: [protocolId], references: [id]) // Решение относится к одному протоколу
  assignments Assignment[] // У одного решения может быть много поручений (Пример: Решение - снести дом; Поручениями будет список действий по сносу дома)
}

// Протокол по совещанию
model Protocol {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solutions Solution[] // Внутри одного протокола может приниматься много решений
}

// Поручения по решениям
model Assignment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  solutionId Int

  status AssignmentStatus
  name   String

  deadline    DateTime
  responsible String

  eventId Int?
  event   Event? @relation(fields: [eventId], references: [id]) // К поручению может быть создано совещание, если оно подохдит под критерии повестки

  solution Solution @relation(fields: [solutionId], references: [id]) // Поручение относится к одному решению
}

enum AssignmentStatus {
  new
  inProgress
  done
  doneAndVerified
}

// Совещание/встреча
model Event {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name       String
  date       DateTime
  meetingUrl String

  assignments Assignment[]
}
